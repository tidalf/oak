#
# Copyright 2022 The Project Oak Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# "Legacy" here means that the testdata was added before policy-based
# verification and has no events.

package(
    default_visibility = ["//:internal"],
    licenses = ["notice"],
)

filegroup(
    name = "cb_attestation",
    srcs = [
        "cb_endorsements.binarypb",
        "cb_evidence.binarypb",
        "cb_evidence_software_rooted.binarypb",
        "cb_reference_values.binarypb",
    ],
)

# A valid recent Transparent Release endorsement bundle.
filegroup(
    name = "endorsement",
    srcs = [
        "endorsement.json",
        "endorsement.json.sig",
        "logentry.json",
        "endorser_public_key.pem",  # tr_development_verifying_key
        # Public key of the Rekor instance hosted by sigstore.dev. It is downloaded
        # from https://rekor.sigstore.dev/api/v1/log/publicKey.
        "rekor_public_key.pem",
    ],
)

# Attestation sample when running on insecure hardware - no SEV-SNP, no TDX.
filegroup(
    name = "fake_attestation",
    srcs = [
        "fake_evidence.binarypb",
        "fake_endorsements.binarypb",
        "fake_reference_values.binarypb",
        # Generated by running verification on the fake evidence.
        "fake_expected_values.binarypb",
    ],
)

# Attestation for an Oak Containers stack running on AMD Genoa platform.
filegroup(
    name = "genoa_oc_attestation",
    srcs = [
        "genoa_oc_endorsements.binarypb",
        "genoa_oc_evidence.binarypb",
        "genoa_oc_reference_values.binarypb",
    ],
)

# Attestation for an Oak Containers stack running on AMD Milan platform.
filegroup(
    name = "milan_oc_staging_attestation",
    srcs = [
        "milan_oc_staging_endorsements.binarypb",
        "milan_oc_staging_evidence.binarypb",
        "milan_oc_staging_reference_values.binarypb",
    ],
)

# Attestation for an Oak Containers stack running on AMD Milan platform.
# Suitable reference values matching the evidence are created on the fly.
filegroup(
    name = "milan_oc_release_attestation",
    srcs = [
        "milan_oc_release_endorsements.binarypb",
        "milan_oc_release_evidence.binarypb",
    ],
)

# Attestation for a Restricted Kernel stack running on AMD Milan platform.
filegroup(
    name = "milan_rk_staging_attestation",
    srcs = [
        "milan_rk_staging_endorsements.binarypb",
        "milan_rk_staging_evidence.binarypb",
        "milan_rk_staging_reference_values.binarypb",
    ],
)

# Attestation for a Restricted Kernel stack running on AMD Milan platform.
# Suitable reference values matching the evidence are created on the fly.
filegroup(
    name = "milan_rk_release_attestation",
    srcs = [
        "milan_rk_release_endorsements.binarypb",
        "milan_rk_release_evidence.binarypb",
    ],
)

# Example attestation evidence on Intel TDX for the Oak Containers stack.
filegroup(
    name = "tdx_oc_attestation",
    srcs = [
        "tdx_oc_endorsements.binarypb",
        "tdx_oc_evidence.binarypb",
        "tdx_oc_reference_values.binarypb",
    ],
)

# Attestation for an Oak Containers stack running on AMD Turin platform.
filegroup(
    name = "turin_oc_attestation",
    srcs = [
        "turin_oc_endorsements.binarypb",
        "turin_oc_evidence.binarypb",
        "turin_oc_reference_values.binarypb",
    ],
)
